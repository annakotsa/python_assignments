import sys
file = sys.argv[1]

G = {}

with open(file) as graph_input:
    for line in graph_input:

        nodes = [int(x) for x in line.split()]
        if len(nodes) != 2:
            continue

        if nodes[0] not in G:
            G[nodes[0]] = []
        if nodes[1] not in G:
            G[nodes[1]] = []

        G[nodes[0]].append(nodes[1])

        G[nodes[1]].append(nodes[0])


def has_children(pq, p):
    return 2*p + 1 < len(pq)

def extract_min_from_pq(pq):
    c = pq[root(pq)]
    set_root(pq, extract_last_from_pq(pq))
    i = root(pq)
    while has_children(pq, i):
        j = min(children(pq, i), key=lambda x: get_data(pq, x))
        if get_data(pq, i) < get_data(pq, j):
            return c
        exchange(pq, i, j)
        i = j
    return c

    exchange(pq, i, j)
    i = j
    return c

def get_data(pq, p):
    return pq[p]

def children(pq, p):
    if 2*p + 2 < len(pq):
        return [2*p + 1, 2*p + 2]
    else:
        return [2*p + 1]

def parent(p):
    return (p - 1) // 2

def exchange(pq, p1, p2):
    pq[p1], pq[p2] = pq[p2], pq[p1]

def extract_last_from_pq(pq):
    return pq.pop()

def root(pq):
    return 0

def set_root(pq, c):
    if len(pq) != 0:
        pq[0] = c

def add_last(pq, c):
    pq.append(c)

def insert_in_pq(pq, c):
    add_last(pq, c)
    i = len(pq) - 1
    while i != root(pq) and get_data(pq, i) < get_data(pq, parent(i)):
        p = parent(i)
        exchange(pq, i, p)
        i = p


def create_pq():
    return[]

mh = create_pq()

d=[0] * len(G)
p=[0] * len(G)
core=[0] * len(G)

v=0
while v < len(G):
    d[v] = len(G[v])

    p[v] = d[v]

    core[v]= 0
    pn = [p[v],v]

    insert_in_pq(mh, pn)

    v = v + 1


while len(mh) > 0 :

    t = extract_min_from_pq(mh)
    core[t[1]] = t[0]

    if len(mh) != 0:
        for v in G[t[1]]:
            d[v] = d[v] - 1
            opn = [p[v], v]
            p[v] = max(t[0], d[v])
            npn = [p[v], v]

            for v in range(len(mh)):
                if mh[v] == opn:
                    mh[v] = npn
                    j = v
                    i = j
                    while get_data(mh, i) < get_data(mh, parent(i)) and i != root(mh):
                        par = parent(i)
                        exchange(mh, i, par)
                        i = par

v = 0
while v < len(G):
    print(v , core[v])
    v = v + 1
